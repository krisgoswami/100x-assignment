/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 **/

const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs');
const path = require('path');
const filepath = path.join(__dirname, './files/data.txt');

const app = express();

app.use(bodyParser.json());

let todos = [];

function write(filename, data) {
  fs.writeFile(filename, data, "utf8", (err) => {
    if (err) {
      console.log("Error writing file", err);
    } else {
      console.log(`write successful ${filename}`);
    }
  });
}

function getTodos(req, res) {
  res.status(200).json(todos);
}

function getTodoById(req, res) {
  const todoId = todos.find(temp);

  function temp(t) {
    return t.id === parseInt(req.params.id);
  }

  if (!todoId) {
    res.status(404).send();
  }
  else {
    res.status(200).send(todoId);
  }
}

function addNewTodo (req, res){
  const newTodo = {
    id: Math.floor(Math.random() * 10000),
    title: req.body.title,
    description: req.body.description
  }
  todos.push(newTodo);
  // write(filepath, todos);                    //writing todos to a file
  res.status(201).send(newTodo);
}

function updateTodo(req, res){
  const updateIndex = todos.findIndex(temp);
  
  function temp(t) {
    return t.id === parseInt(req.params.id);
  }

  if (updateIndex === -1) {
    res.status(404).send();
  }
  else {
    todos[updateIndex].title = req.body.title;
    todos[updateIndex].description = req.body.description;
    res.status(200).send(todos[updateIndex]);
    // write(filepath, todos);
  }
}

function deleteTodo(req, res){
  const deleteIndex = todos.findIndex(temp);
  
  function temp(t) {
    return t.id === parseInt(req.params.id);
  }

  if (deleteIndex === -1) {
    res.status(404).send();
  }
  else{
    todos.splice(deleteIndex, 1);
    res.status(200).send();
  }
}

app.get('/todos', getTodos);
app.get('/todos/:id', getTodoById);
app.post('/todos', addNewTodo);
app.put('/todos/:id', updateTodo);
app.delete('/todos/:id', deleteTodo);

// app.get('/todos', (req, res) => {
//   res.json(todos);
// });
// 
// app.get('/todos/:id', (req, res) => {
//   const todo = todos.find(temp => temp.id === parseInt(req.params.id));
//   if (!todo) {
//     res.status(404).send();
//   }
//   else {
//     res.status(200).json(todo);
//   }
// })

// app.post('/todos', (req, res) => {
//   const newTodo = {
//     id: Math.floor(Math.random() * 1000000),
//     title: req.body.title,
//     description: req.body.description
//   };
//   todos.push(newTodo);
//   res.status(201).json(newTodo);
// })

// app.put('/todos/:id', (req, res) => {
//   const updateIndex = todos.findIndex(temp => temp.id === parseInt(req.params.id));
//   if (updateIndex === -1) {
//     res.status(404).send();
//   }
//   else {
//     todos[updateIndex].title = req.body.title;
//     todos[updateIndex].description = req.body.description;
//     res.status(200).json(todos[updateIndex]);
//   }
// })
// 
// app.delete('/todos/:id', (req, res) => {
//   const deleteIndex = todos.findIndex(temp => temp.id === parseInt(req.params.id));
//   if (deleteIndex === -1) {
//     res.status(404).send();
//   }
//   else {
//     todos.splice(deleteIndex, 1);
//     res.status(200).send();
//   }
// })

app.use((req, res, next) => {
  res.status(404).send();
});


// const PORT = 3000;
// app.listen(PORT, () => console.log(`Server started on port: http://localhost:${PORT}`));
module.exports = app;
